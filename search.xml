<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java使用网易Email发邮件</title>
      <link href="/2018/03/24/NetEaseEmail/"/>
      <url>/2018/03/24/NetEaseEmail/</url>
      <content type="html"><![CDATA[<h3 id="一-开启网易邮箱-POP3-IMAP-SMTP服务"><a href="#一-开启网易邮箱-POP3-IMAP-SMTP服务" class="headerlink" title="一.开启网易邮箱 POP3/IMAP/SMTP服务"></a>一.开启网易邮箱 POP3/IMAP/SMTP服务</h3><h4 id="1-1-登录网易163邮箱，点击上方设置中的POP3-IMAP-SMTP，然后把全部服务勾选，保存，再点击左侧的客户端授权密码，设置自己邮箱的授权密码"><a href="#1-1-登录网易163邮箱，点击上方设置中的POP3-IMAP-SMTP，然后把全部服务勾选，保存，再点击左侧的客户端授权密码，设置自己邮箱的授权密码" class="headerlink" title="1.1 登录网易163邮箱，点击上方设置中的POP3/IMAP/SMTP，然后把全部服务勾选，保存，再点击左侧的客户端授权密码，设置自己邮箱的授权密码"></a>1.1 登录网易163邮箱，点击上方设置中的POP3/IMAP/SMTP，然后把全部服务勾选，保存，再点击左侧的客户端授权密码，设置自己邮箱的授权密码</h4><p><img src="/img/page/neteaseset.png" alt="Alt text"><br><img src="/img/page/neteaseserver.png" alt="Alt text"></p><h3 id="二-Java发送纯文本邮件示例"><a href="#二-Java发送纯文本邮件示例" class="headerlink" title="二.Java发送纯文本邮件示例"></a>二.Java发送纯文本邮件示例</h3><p><strong> import java.util.Date;<br>import java.util.Properties;<br>import javax.mail.Message;<br>import javax.mail.Session;<br>import javax.mail.Transport;<br>import javax.mail.internet.InternetAddress;<br>import javax.mail.internet.MimeMessage;<br>import javax.mail.internet.MimeUtility; </strong></p><p><strong> public class Email {<br>    // 发件人的邮箱账号,授权码,发件人网易邮箱的 SMTP 服务器地址<br>    public static String fromEmail = “<a href="mailto:xxxxxxxx@163.com" target="_blank" rel="noopener">xxxxxxxx@163.com</a>“;<br>    public static String password = “xxxxxxx”;<br>    public static String emailSMTPHost = “smtp.163.com”; </strong></p><p><strong> public static void sendMail(String from, String toMail, String mailTitle, String mailContent) throws Exception {<br>Properties props = new Properties();// 创建参数配置, 用于连接邮件服务器的参数配置<br>props.put(“mail.smtp.host”, emailSMTPHost);// 存储发送邮件服务器的信息,qq为例，如果是163则是smtp.163.com<br>props.put(“mail.transport.protocol”, “smtp”);// 使用smtp简单邮件传输协议<br>props.put(“mail.smtp.auth”, “true”);// 是否需要身份验证<br>// props.put(“ mail.smtp.timeout “, “25000”); //传输超时时间<br>Session session = Session.getInstance(props);<br>session.setDebug(true);// 开启Session的debug模式，这样就可以查看到程序发送Email的运行状态 </strong></p><p><strong> MimeMessage message = new MimeMessage(session);// 由邮件会话创建一个扩展信息对象，包装信息格式，可以只是简单文本<br>// 发件人的自定义昵称<br>String nick = MimeUtility.encodeText(from);// 防止乱码<br>message.setFrom(new InternetAddress(nick + “&lt;” + fromEmail + “&gt;”));// 设置发件人的地址<br>message.setRecipient(Message.RecipientType.TO, new InternetAddress(toMail));// 设置收件人，并设置其接受类型为to<br>message.setSubject(mailTitle);// 设置标题<br>message.setContent(mailContent, “text/html;charset=UTF-8”);// 设置为html格式，可以发送多种样式<br>message.setSentDate(new Date()); // 设置发信时间<br>message.saveChanges(); // 存储邮件信息 </strong></p><p><strong> Transport tran = session.getTransport(“smtp”);<br>// 使用smtp协议获取session环境的Transprot对象来发送邮件, javamial使用Transport对象来管理发送邮件服务<br>tran.connect(props.getProperty(“mail.smtp.host”), fromEmail, password);// 链接邮箱服务器，发送邮件的邮箱，以及授权码<br>tran.sendMessage(message, message.getAllRecipients());// 发送邮件，getAllRecipients()是所有已设好的收件人地址<br>tran.close();<br>} </strong></p><p><strong> public static void main(String[] args) throws Exception {<br>//昵称，接收人，邮件主题，文件内容<br>sendMail(“mlm”, “<a href="mailto:1365413148@qq.com" target="_blank" rel="noopener">1365413148@qq.com</a>“, “title”, “<span style="color:red;">maliming</span>“);<br>}<br>}</strong></p><h3 id="三-Java发送图片附件邮件示例"><a href="#三-Java发送图片附件邮件示例" class="headerlink" title="三.Java发送图片附件邮件示例"></a>三.Java发送图片附件邮件示例</h3><p><strong> import java.util.Date;<br>import java.util.Properties;<br>import javax.activation.DataHandler;<br>import javax.activation.FileDataSource;<br>import javax.mail.Message;<br>import javax.mail.Session;<br>import javax.mail.Transport;<br>import javax.mail.internet.InternetAddress;<br>import javax.mail.internet.MimeBodyPart;<br>import javax.mail.internet.MimeMessage;<br>import javax.mail.internet.MimeMultipart;<br>import javax.mail.internet.MimeUtility; </strong></p><p><strong> public class Email {<br>    // 发件人的邮箱账号,授权码,发件人网易邮箱的 SMTP 服务器地址<br>    public static String fromEmail = “<a href="mailto:xxxxxxxx@163.com" target="_blank" rel="noopener">xxxxxxxx@163.com</a>“;<br>    public static String password = “xxxxxxxx”;<br>    public static String emailSMTPHost = “smtp.163.com”; </strong></p><p><strong> public static void main(String[] args) throws Exception {<br>//昵称，接收人，邮件标题，邮件文本内容，图片URL，文件URL<br>sendMessage(“mlm”, “<a href="mailto:1365413148@qq.com" target="_blank" rel="noopener">1365413148@qq.com</a>“, “测试邮件”, “my name is maliming”, “D:\qqemail.png”, “D:\mlm.txt”);<br>} </strong></p><p><strong> public static void sendMessage(String nickname, String toMail, String mailTitle, String mailContent,String imageUrl, String fileUrl) throws Exception {<br>Properties props = new Properties();// 创建参数配置, 用于连接邮件服务器的参数配置<br>props.setProperty(“mail.transport.protocol”, “smtp”);// 使用smtp简单邮件传输协议<br>props.setProperty(“mail.smtp.host”, emailSMTPHost);// 发件人的邮箱的 SMTP 服务器地址<br>props.setProperty(“mail.smtp.auth”, “true”);// 是否需要身份验证 </strong></p><p><strong> // 根据配置创建会话对象, 用于和邮件服务器交互<br>Session session = Session.getInstance(props);<br>session.setDebug(true);// 开启Session的debug模式，这样就可以查看到程序发送Email的详细 log<br>// 创建图片文件<br>FileDataSource imageFile = new FileDataSource(imageUrl);<br>FileDataSource file = new FileDataSource(fileUrl);<br>MimeMessage message = createMessage(session, nickname, mailTitle, mailContent, fromEmail, toMail, imageFile,file); </strong></p><p><strong> Transport tran = session.getTransport(“smtp”);<br>// 使用smtp协议获取session环境的Transprot对象来发送邮件, javamial使用Transport对象来管理发送邮件服务<br>tran.connect(props.getProperty(“mail.smtp.host”), fromEmail, password);// 连接邮箱服务器，发送邮件的邮箱，以及授权码<br>tran.sendMessage(message, message.getAllRecipients());// 发送邮件，getAllRecipients()是所有已设好的收件人地址<br>tran.close();// 关闭连接<br>} </strong></p><p><strong> public static MimeMessage createMessage(Session session, String nickname, String mailTitle, String mailContent,String sendMail, String toMail, FileDataSource imageFile, FileDataSource file) throws Exception {<br>// 由邮件会话创建一个扩展信息对象，包装信息格式，可以只是简单文本<br>MimeMessage message = new MimeMessage(session);<br>// 发件人的自定义昵称<br>String nick = MimeUtility.encodeText(nickname);// 防止乱码<br>message.setFrom(new InternetAddress(nick + “&lt;” + sendMail + “&gt;”));// 设置发件人的地址<br>message.setRecipient(Message.RecipientType.TO, new InternetAddress(toMail));// 设置收件人，并设置其接受类型为to<br>message.setSubject(mailTitle);// 设置邮件标题<br>// 设置邮件内容<br>// 创建图片“节点”<br>MimeBodyPart image = new MimeBodyPart();<br>DataHandler dataHandler = new DataHandler(imageFile);// 读取图片文件<br>image.setDataHandler(dataHandler);// 将图片数据添加到“节点”<br>image.setContentID(“image”);// 为“节点”设置一个唯一的任意编号（方便引用）</strong></p><p><strong> // 创建文本“节点”<br>MimeBodyPart text = new MimeBodyPart();<br>// 这里添加图片的方式是将整个图片包含到邮件内容中,也可以以 http 链接的形式添加网络图片，设置为html格式<br>text.setContent(mailContent + “ </strong><br><strong> <font color="#FF0033">//此处因为markdown会解析HTML代码，所以只能放入代码块中，复制时需要注意去掉1</font> </strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'cid:image'</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> “, “text/html;charset=UTF-8”); </strong></p><p><strong> // （文本+图片）设置 文本 和 图片 “节点”的关系（将 文本 和 图片 “节点”合成一个混合“节点”）<br>MimeMultipart textAndImage = new MimeMultipart();<br>textAndImage.addBodyPart(text);<br>textAndImage.addBodyPart(image);<br>textAndImage.setSubType(“related”);// 关联关系 </strong></p><p><strong> // 将 文本+图片 的混合“节点”封装成一个普通“节点”<br>// 最终添加到邮件的 Content 是由多个 BodyPart 组成的 Multipart, 所以我们需要的是 BodyPart,<br>// 上面的 textAndImage 并非 BodyPart, 所有要把 textAndImage 封装成一个 BodyPart<br>MimeBodyPart text_image = new MimeBodyPart();<br>text_image.setContent(textAndImage); </strong></p><p><strong> // 创建附件“节点”<br>MimeBodyPart attachment = new MimeBodyPart();<br>DataHandler dataHandler2 = new DataHandler(file);// 读取文件<br>attachment.setDataHandler(dataHandler2);// 将附件数据添加到“节点”<br>attachment.setFileName(MimeUtility.encodeText(dataHandler2.getName()));// 设置附件的文件名（需要编码） </strong></p><p><strong> // 设置（文本+图片）和 附件 的关系（合成一个大的混合“节点” / Multipart ）<br>MimeMultipart mimeMultipart = new MimeMultipart();<br>mimeMultipart.addBodyPart(text_image);<br>mimeMultipart.addBodyPart(attachment);// 如果有多个附件，可以创建多个多次添加<br>mimeMultipart.setSubType(“mixed”);// 混合关系 </strong></p><p><strong> // 设置整个邮件的关系（将最终的混合“节点”作为邮件的内容添加到邮件对象）<br>message.setContent(mimeMultipart);<br>// 设置发件时间<br>message.setSentDate(new Date());<br>// 保存上面的所有设置<br>message.saveChanges();<br>return message;<br>}<br>} </strong></p><p><strong><font color="#FF0033">因为编辑器的缘故Java代码没有层次，所以复制到你用的IDE中,用IDE的代码规范功能规范一下</font><br>若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。 </strong></p>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> email </tag>
            
            <tag> 网易邮箱 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java使用QQEmail发邮件</title>
      <link href="/2018/03/24/QQEmail/"/>
      <url>/2018/03/24/QQEmail/</url>
      <content type="html"><![CDATA[<p><strong> 我们在做项目的时候，经常会遇到使用邮箱发送验证码,图片,附件等需求,一般国内主要使用qq 邮箱与网易邮箱，这里选用qq邮箱</strong></p><h3 id="一-开启qq邮箱POP3-SMTP服务"><a href="#一-开启qq邮箱POP3-SMTP服务" class="headerlink" title="一.开启qq邮箱POP3/SMTP服务"></a>一.开启qq邮箱POP3/SMTP服务</h3><h4 id="1-1-登录qq邮箱，点击上方的设置，选择账户，下拉找到POP3-SMTP服务开启的地方，开启后点击下面生成授权码，然后保存好授权码"><a href="#1-1-登录qq邮箱，点击上方的设置，选择账户，下拉找到POP3-SMTP服务开启的地方，开启后点击下面生成授权码，然后保存好授权码" class="headerlink" title="1.1 登录qq邮箱，点击上方的设置，选择账户，下拉找到POP3/SMTP服务开启的地方，开启后点击下面生成授权码，然后保存好授权码"></a>1.1 登录qq邮箱，点击上方的设置，选择账户，下拉找到POP3/SMTP服务开启的地方，开启后点击下面生成授权码，然后保存好授权码</h4><p><img src="/img/page/qqset.png" alt="Alt text"><br><img src="/img/page/qqserver.png" alt="Alt text"></p><h3 id="二-Java发送纯文本邮件示例"><a href="#二-Java发送纯文本邮件示例" class="headerlink" title="二.Java发送纯文本邮件示例"></a>二.Java发送纯文本邮件示例</h3><p><strong> import java.util.Date;<br>import java.util.Properties;<br>import javax.mail.Message;<br>import javax.mail.Session;<br>import javax.mail.Transport;<br>import javax.mail.internet.InternetAddress;<br>import javax.mail.internet.MimeMessage;<br>import javax.mail.internet.MimeUtility; </strong></p><p><strong> public class Email {<br>    // 发件人的邮箱账号,授权码,发件人网易邮箱的 SMTP 服务器地址<br>    public static String fromEmail = “<a href="mailto:xxxxxxxxxx@qq.com" target="_blank" rel="noopener">xxxxxxxxxx@qq.com</a>“;<br>    public static String password = “xxxxxxxxxxxx”;<br>    public static String emailSMTPHost = “smtp.qq.com”; </strong></p><p><strong> public static void sendMail(String from, String toMail, String mailTitle, String mailContent) throws Exception {<br>Properties props = new Properties();// 加载一个配置文件<br>props.put(“mail.smtp.host”, emailSMTPHost);// 存储发送邮件服务器的信息<br>props.put(“mail.transport.protocol”, “smtp”);// 使用smtp简单邮件传输协议<br>// props.put(“mail.smtp.port”, “587”);腾讯官方开放的端口号465或587<br>props.put(“mail.smtp.auth”, “true”);// 是否需要身份验证<br>props.put(“mail.smtp.ssl.enable”, “true”);<br>// QQ邮箱的SSL加密,不设置出现530 Error:A secure connection is requiered(such as ssl)错误<br>// props.put(“ mail.smtp.timeout “, “25000”); //传输超时时间<br>Session session = Session.getInstance(props);<br>session.setDebug(true);// 开启Session的debug模式，这样就可以查看到程序发送Email的运行状态 </strong></p><p><strong> MimeMessage message = new MimeMessage(session);// 由邮件会话创建一个扩展信息对象，包装信息格式，可以只是简单文本<br>// 发件人的自定义昵称<br>String nick = MimeUtility.encodeText(from);// 防止乱码<br>message.setFrom(new InternetAddress(nick + “&lt;” + fromEmail + “&gt;”));// 设置发件人的地址<br>message.setRecipient(Message.RecipientType.TO, new InternetAddress(toMail));// 设置收件人，并设置其接受类型为to<br>message.setSubject(mailTitle);// 设置标题<br>message.setContent(mailContent, “text/html;charset=UTF-8”);// 设置为html格式，可以发送多种样式<br>message.setSentDate(new Date()); //设置发信时间<br>message.saveChanges(); // 存储邮件信息 </strong></p><p><strong> Transport tran = session.getTransport(“smtp”);<br>// 使用smtp协议获取session环境的Transprot对象来发送邮件,javamial使用Transport对象来管理发送邮件服务<br>tran.connect(props.getProperty(“mail.smtp.host”), fromEmail, password);// 链接邮箱服务器，发送邮件的邮箱，以及授权码<br>tran.sendMessage(message, message.getAllRecipients());// 发送邮件，getAllRecipients()是所有已设好的收件人地址<br>tran.close();<br>} </strong></p><p><strong> public static void main(String[] args) throws Exception {<br>sendMail(“mlm”, “<a href="mailto:1365413148@qq.com" target="_blank" rel="noopener">1365413148@qq.com</a>“, “title”, “<span style="color:red;">maliming</span>“);<br>}<br>} </strong></p><h3 id="三-Java发送图片附件邮件示例"><a href="#三-Java发送图片附件邮件示例" class="headerlink" title="三. Java发送图片附件邮件示例"></a>三. Java发送图片附件邮件示例</h3><p><strong> import java.util.Date;<br>import java.util.Properties;<br>import javax.activation.DataHandler;<br>import javax.activation.FileDataSource;<br>import javax.mail.Message;<br>import javax.mail.Session;<br>import javax.mail.Transport;<br>import javax.mail.internet.InternetAddress;<br>import javax.mail.internet.MimeBodyPart;<br>import javax.mail.internet.MimeMessage;<br>import javax.mail.internet.MimeMultipart;<br>import javax.mail.internet.MimeUtility; </strong></p><p><strong> public class Email {<br>    // 发件人的邮箱账号,授权码,发件人网易邮箱的 SMTP 服务器地址<br>    // 发件人的邮箱账号,授权码,发件人网易邮箱的 SMTP 服务器地址<br>    public static String fromEmail = “<a href="mailto:xxxxxxxxxx@qq.com" target="_blank" rel="noopener">xxxxxxxxxx@qq.com</a>“;<br>    public static String password = “xxxxxxxxxxxx”;<br>    public static String emailSMTPHost = “smtp.qq.com”; </strong></p><p><strong> public static void main(String[] args) throws Exception {<br>//发件人昵称，收件人，邮件主题，邮件文本内容，图片URL，文件URL<br>sendMessage(“mlm”, “<a href="mailto:1365413148@qq.com" target="_blank" rel="noopener">1365413148@qq.com</a>“, “测试邮件”, “my name is maliming”, “D:\qqemail.png”, “D:\mlm.txt”);<br>} </strong></p><p><strong> public static void sendMessage(String nickname, String toMail, String mailTitle, String mailContent,String imageUrl, String fileUrl) throws Exception {<br>Properties props = new Properties();// 创建参数配置, 用于连接邮件服务器的参数配置<br>props.setProperty(“mail.transport.protocol”, “smtp”);// 使用smtp简单邮件传输协议<br>props.setProperty(“mail.smtp.host”, emailSMTPHost);// 发件人的邮箱的 SMTP 服务器地址<br>props.setProperty(“mail.smtp.auth”, “true”);// 是否需要身份验证<br>props.put(“mail.smtp.ssl.enable”, “true”);<br>// QQ邮箱的SSL加密,不设置出现530 Error:A secure connection is requiered(such as ssl)错误<br>// 根据配置创建会话对象, 用于和邮件服务器交互<br>Session session = Session.getInstance(props);<br>session.setDebug(true);// 开启Session的debug模式，这样就可以查看到程序发送Email的详细 log<br>// 创建图片文件<br>FileDataSource imageFile = new FileDataSource(imageUrl);<br>FileDataSource file = new FileDataSource(fileUrl);<br>MimeMessage message = createMessage(session, nickname, mailTitle, mailContent, fromEmail, toMail, imageFile,file); </strong></p><p><strong> Transport tran = session.getTransport(“smtp”);<br>// 使用smtp协议获取session环境的Transprot对象来发送邮件, javamial使用Transport对象来管理发送邮件服务<br>tran.connect(props.getProperty(“mail.smtp.host”), fromEmail, password);// 连接邮箱服务器，发送邮件的邮箱，以及授权码<br>tran.sendMessage(message, message.getAllRecipients());// 发送邮件，getAllRecipients()是所有已设好的收件人地址<br>tran.close();// 关闭连接<br>} </strong></p><p><strong> public static MimeMessage createMessage(Session session, String nickname, String mailTitle, String mailContent,<br>String sendMail, String toMail, FileDataSource imageFile, FileDataSource file) throws Exception {<br>// 由邮件会话创建一个扩展信息对象，包装信息格式，可以只是简单文本<br>MimeMessage message = new MimeMessage(session);<br>// 发件人的自定义昵称<br>String nick = MimeUtility.encodeText(nickname);// 防止乱码<br>message.setFrom(new InternetAddress(nick + “&lt;” + sendMail + “&gt;”));// 设置发件人的地址<br>message.setRecipient(Message.RecipientType.TO, new InternetAddress(toMail));// 设置收件人，并设置其接受类型为to<br>message.setSubject(mailTitle);// 设置邮件标题<br>// 设置邮件内容<br>// 创建图片“节点”<br>MimeBodyPart image = new MimeBodyPart();<br>DataHandler dataHandler = new DataHandler(imageFile);// 读取图片文件<br>image.setDataHandler(dataHandler);// 将图片数据添加到“节点”<br>image.setContentID(“image”);// 为“节点”设置一个唯一的任意编号（方便引用） </strong></p><p><strong> // 创建文本“节点”<br>MimeBodyPart text = new MimeBodyPart();<br>// 这里添加图片的方式是将整个图片包含到邮件内容中,也可以以 http 链接的形式添加网络图片，设置为html格式<br>text.setContent(mailContent + “ </strong><br><strong> <font color="#FF0033">//此处因为markdown会解析HTML代码，所以只能放入代码块中，复制时需要注意去掉1</font> </strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'cid:image'</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> “, “text/html;charset=UTF-8”); </strong></p><p><strong> // （文本+图片）设置 文本 和 图片 “节点”的关系（将 文本 和 图片 “节点”合成一个混合“节点”）<br>MimeMultipart textAndImage = new MimeMultipart();<br>textAndImage.addBodyPart(text);<br>textAndImage.addBodyPart(image);<br>textAndImage.setSubType(“related”);// 关联关系 </strong></p><p><strong> // 将 文本+图片 的混合“节点”封装成一个普通“节点”<br>// 最终添加到邮件的 Content 是由多个 BodyPart 组成的 Multipart, 所以我们需要的是 BodyPart,<br>// 上面的 textAndImage 并非 BodyPart, 所有要把 textAndImage 封装成一个 BodyPart<br>MimeBodyPart text_image = new MimeBodyPart();<br>text_image.setContent(textAndImage); </strong></p><p><strong> // 创建附件“节点”<br>MimeBodyPart attachment = new MimeBodyPart();<br>DataHandler dataHandler2 = new DataHandler(file);// 读取文件<br>attachment.setDataHandler(dataHandler2);// 将附件数据添加到“节点”<br>attachment.setFileName(MimeUtility.encodeText(dataHandler2.getName()));// 设置附件的文件名（需要编码）</strong></p><p><strong> // 设置（文本+图片）和 附件 的关系（合成一个大的混合“节点” / Multipart ）<br>MimeMultipart mimeMultipart = new MimeMultipart();<br>mimeMultipart.addBodyPart(text_image);<br>mimeMultipart.addBodyPart(attachment);// 如果有多个附件，可以创建多个多次添加<br>mimeMultipart.setSubType(“mixed”);// 混合关系 </strong></p><p><strong> // 设置整个邮件的关系（将最终的混合“节点”作为邮件的内容添加到邮件对象）<br>message.setContent(mimeMultipart);<br>// 设置发件时间<br>message.setSentDate(new Date());<br>// 保存上面的所有设置<br>message.saveChanges();<br>return message;<br>}<br>} </strong></p><p><strong><font color="#FF0033">因为编辑器的缘故Java代码没有层次，所以复制到你用的IDE中,用IDE的代码规范功能规范一下</font><br>若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。 </strong></p>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> email </tag>
            
            <tag> QQ邮箱 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java使用中国网建发送短信验证码</title>
      <link href="/2018/03/24/WebChineseShortMessage/"/>
      <url>/2018/03/24/WebChineseShortMessage/</url>
      <content type="html"><![CDATA[<h3 id="一-注册，登录以及注意事项。"><a href="#一-注册，登录以及注意事项。" class="headerlink" title="一.注册，登录以及注意事项。"></a>一.注册，登录以及注意事项。</h3><p><strong> 1.1 中国网建网址：<a href="http://www.smschinese.cn" title="中国网建" target="_blank" rel="noopener">http://www.smschinese.cn</a> </strong></p><p><strong> 1.2 注册时用户名，以及姓名都可以随便写，邮箱只会验证存在与否，不会发验证码验证，手机号填自己的(接收自己的初始密码)。 </strong></p><p><strong> 1.3 登录到用户首页，有快捷菜单，发送短信；发送彩信；Excel短信，先点击发送短信，一定要先设置签名(否则无法发送短信)。 </strong></p><p><strong> 1.4 在旁边的菜单中有修改短信密钥，记录下短信密钥。 </strong></p><h3 id="二-Java示例。"><a href="#二-Java示例。" class="headerlink" title="二.Java示例。"></a>二.Java示例。</h3><h4 id="2-1-接口地址"><a href="#2-1-接口地址" class="headerlink" title="2.1 接口地址"></a>2.1 接口地址</h4><p><strong> <font color="#FF0033">GBK编码发送接口地址：<br><a href="http://gbk.api.smschinese.cn/?Uid=本站用户名&amp;Key=短信密钥&amp;smsMob=手机号码&amp;smsText=短信内容" target="_blank" rel="noopener">http://gbk.api.smschinese.cn/?Uid=本站用户名&amp;Key=短信密钥&amp;smsMob=手机号码&amp;smsText=短信内容</a><br>UTF-8编码发送接口地址：<br><a href="http://utf8.api.smschinese.cn/?Uid=本站用户名&amp;Key=短信密钥&amp;smsMob=手机号码&amp;smsText=短信内容" target="_blank" rel="noopener">http://utf8.api.smschinese.cn/?Uid=本站用户名&amp;Key=短信密钥&amp;smsMob=手机号码&amp;smsText=短信内容</a><br>获取短信数量接口地址(UTF-8)：<br><a href="http://www.smschinese.cn/web_api/SMS/?Action=SMS_Num&amp;Uid=本站用户名&amp;Key=短信密钥" target="_blank" rel="noopener">http://www.smschinese.cn/web_api/SMS/?Action=SMS_Num&amp;Uid=本站用户名&amp;Key=短信密钥</a><br>获取短信数量接口地址(GBK)：<br><a href="http://www.smschinese.cn/web_api/SMS/GBK/?Action=SMS_Num&amp;Uid=本站用户名&amp;Key=短信密钥" target="_blank" rel="noopener">http://www.smschinese.cn/web_api/SMS/GBK/?Action=SMS_Num&amp;Uid=本站用户名&amp;Key=短信密钥</a></font> </strong></p><h4 id="2-2-短信发送后返回值以及意义"><a href="#2-2-短信发送后返回值以及意义" class="headerlink" title="2.2 短信发送后返回值以及意义"></a>2.2 短信发送后返回值以及意义</h4><p><strong><font color="#FF0033"> -1（没有该账户）；-2（短信密钥错误）；-3（短信数量不足）；-4（手机号不正确）；-6（IP被限制）；-14（短信内容出现非法字符）；-21（MD5接口密钥加密不正确）；-41（手机号为空）；-42（短信内容为空）；-51（短信签名格式不正确<br>接口签名格式为：【签名内容】）。</font> </strong></p><h4 id="2-3-Java示例"><a href="#2-3-Java示例" class="headerlink" title="2.3 Java示例"></a>2.3 Java示例</h4><p><strong> import java.io.IOException;<br>import org.apache.commons.httpclient.Header;<br>import org.apache.commons.httpclient.HttpClient;<br>import org.apache.commons.httpclient.HttpException;<br>import org.apache.commons.httpclient.NameValuePair;<br>import org.apache.commons.httpclient.methods.PostMethod; </strong></p><p><strong> public class SendMsg {<br>    private static final String SERVER_URL = “<a href="http://utf8.api.smschinese.cn&quot;" target="_blank" rel="noopener">http://utf8.api.smschinese.cn&quot;</a>;<br>    private static final String USERNAME = “你的用户名”;<br>    private static final String KEY = “短信密钥”;<br>    public static void main(String[] args) throws Exception {<br>        String phone = “被发送的短信的手机号”;<br>        String smsText = “短信发送的内容”;<br>        String result = SendMessage(phone, smsText);<br>        int allResult = Integer.valueOf(result).intValue();<br>        if (allResult &gt; 0) {<br>            System.out.println(“发送成功”);<br>        } else {<br>            System.out.println(“发送失败”);<br>        }<br>    }<br>    public static String SendMessage(String phone, String smsText) throws HttpException, IOException {<br>        HttpClient client = new HttpClient();<br>        PostMethod post = new PostMethod(SERVER_URL);<br>        post.addRequestHeader(“Content-Type”, “application/x-www-form-urlencoded;charset=utf-8”);// 在头文件中设置转码<br>        NameValuePair[] data = { new NameValuePair(“Uid”, USERNAME), new NameValuePair(“Key”, KEY),<br>                new NameValuePair(“smsMob”, phone), new NameValuePair(“smsText”, smsText) };<br>        post.setRequestBody(data);<br>        client.executeMethod(post);<br>        // 请求头信息<br>        Header[] headers = post.getResponseHeaders();<br>        // 输出请求头信息<br>        // for (Header h : headers) { System.out.println(h.toString()); }<br>        // http状态码<br>        int statusCode = post.getStatusCode();<br>        System.out.println(“statusCode:” + statusCode);<br>        String result = new String(post.getResponseBodyAsString().getBytes(“utf-8”));<br>        System.out.println(result); // 打印返回消息状态<br>        post.releaseConnection();<br>        return result;<br>    }<br>} </strong></p><p><strong><font color="#FF0033">因为编辑器的缘故Java代码没有层次，所以复制到你用的IDE中,用IDE的代码规范功能规范一下</font><br>若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。 </strong></p>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> shortmessage </tag>
            
            <tag> 中国网建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java使用网易云信发送短信验证码</title>
      <link href="/2018/03/23/NetEaseShortMessage/"/>
      <url>/2018/03/23/NetEaseShortMessage/</url>
      <content type="html"><![CDATA[<h3 id="一-注册登录"><a href="#一-注册登录" class="headerlink" title="一.注册登录"></a>一.注册登录</h3><p><strong>  1.1 网易云信网址:<a href="https://netease.im/sms" title="网易云信" target="_blank" rel="noopener">https://netease.im/sms</a> </strong></p><p><strong> 1.2 点击如何使用，进行注册，邮箱使用自己的，因为需要激活账号，公司名称可以随便写。</strong></p><p><strong> 1.3 进入你的邮箱激活登录后，创建应用，创建应用信息可以随便填写。</strong></p><p><strong> 1.4 点击你刚才创建的应用，开通短信功能，会有20条免费普通短信，20条语音短信，2块钱的国际短信。</strong></p><p><strong> 1.5 开通短信功能，它的后面有<font color="#FF0033">短信模板管理</font>和开发手册。短信模板管理：有三类模板，1.通知类模板；2.验证码模板；3.运营类模板。我们使用验证码模板就好。验证码模板：已有一个默认模板，我们可以创建自己的模板，短信主题为短信名称(没什么大用)，记得一定看它的短信规则，记得记录下你的<font color="#FF0033">短信模板ID</font>。开发手册：我们主要看两个：    短信接口指南和短信接入示例（主要看Java示例）。</strong></p><h3 id="二-我的Java示例"><a href="#二-我的Java示例" class="headerlink" title="二. 我的Java示例"></a>二. 我的Java示例</h3><p><strong> 2.1 点击你创建的应用，上方会有App Key管理：记录下你的App Key和App Secret。</strong></p><p><strong> 2.2 jar包准备，开发手册中提供了两个jar包下载：httpclient-4.5.1.jar和httpcore-4.4.3.jar。还需要准备commons-logging-1.2.jar和fastjson-1.1.15.jar。若是普通的Java项目，这几个jar包下载都可以 jar包名称+maven，去maven仓库中下载jar包。</strong></p><p><strong> 2.3 短信状态码：<a href="http://dev.netease.im/docs/product/短信/短信状态码" title="短信状态码" target="_blank" rel="noopener">短信状态码</a> </strong></p><h4 id="2-4-Java代码"><a href="#2-4-Java代码" class="headerlink" title="2.4 Java代码"></a>2.4 Java代码</h4><p><strong> <font color="#FF0033">CheckSumBuilder.java 校验码生成类</font> </strong></p><p><strong>import java.security.MessageDigest;<br>public class CheckSumBuilder {<br>      //计算并获取checkSum<br>    public static String getCheckSum(String appSecret,String nonce,String curTime){<br>        return encode(“SHA”,appSecret+nonce+curTime);<br>    }<br>    private static String encode(String algorithm,String value){<br>        if(value==null){<br>            return null;<br>        }<br>        try {<br>            MessageDigest messageDigest=MessageDigest.getInstance(algorithm);<br>            messageDigest.update(value.getBytes());<br>            return getFormattedText(messageDigest.digest());<br>        } catch (Exception e) {<br>            throw new RuntimeException(e);<br>        }<br>    }<br>    private static String getFormattedText(byte[] bytes){<br>        int len=bytes.length;<br>        StringBuilder sb=new StringBuilder(len*2);<br>        for(int $i=0;$i&lt;len;$i++){<br>            sb.append(HEX_DIGITS[(bytes[$i]&gt;&gt;4)&amp;0x0f]);<br>            sb.append(HEX_DIGITS[bytes[$i]&amp;0x0f]);<br>        }<br>        return sb.toString();<br>    }<br>    private static final char[] HEX_DIGITS={‘0’,’1’,’2’,’3’,’4’,’5’,’6’,<br>            ‘7’,’8’,’9’,’a’,’b’,’c’,’d’,’e’,’f’};<br>}</strong></p><p><strong> <font color="#FF0033">SendMessage.java 发送短信工具类</font> </strong></p><p><strong> import java.io.IOException;<br>import java.io.UnsupportedEncodingException;<br>import java.util.ArrayList;<br>import java.util.Date;<br>import java.util.List;<br>import org.apache.http.HttpResponse;<br>import org.apache.http.NameValuePair;<br>import org.apache.http.client.ClientProtocolException;<br>import org.apache.http.client.entity.UrlEncodedFormEntity;<br>import org.apache.http.client.methods.HttpPost;<br>import org.apache.http.impl.client.DefaultHttpClient;<br>import org.apache.http.message.BasicNameValuePair;<br>import org.apache.http.util.EntityUtils; </strong></p><p><strong> public class SendMessage {<br>    // 发送验证码的请求路径URL<br>    private static final String SERVER_URL = “<a href="https://api.netease.im/sms/sendcode.action&quot;" target="_blank" rel="noopener">https://api.netease.im/sms/sendcode.action&quot;</a>;<br>    // 网易云信分配的账号，请替换你在管理后台应用下申请的Appkey<br>    private static final String APP_KEY = “放入你自己的App Key”;<br>    // 网易云信分配的密钥，请替换你在管理后台应用下申请的appSecret<br>    private static final String APP_SECRET = “放入你自己的App Secret”;<br>    // 随机数<br>    private static final String NONCE = “123456”;<br>    // 短信模板ID<br>    private static final String TEMPLATEID = “4022398”;<br>    // 手机号<br>    /<em> private static final String MOBILE=”15660126686”; </em>/<br>    // 验证码长度，范围4～10，默认为4<br>    private static final String CODELEN = “6”;<br>    public static String SendCode(String phone) throws ClientProtocolException, IOException {<br>        DefaultHttpClient httpClient = new DefaultHttpClient();<br>        HttpPost httpPost = new HttpPost(SERVER_URL);<br>        String curTime = String.valueOf((new Date()).getTime() / 1000L);<br>        //参考计算CheckSum的java代码.<br>        String checkSum = CheckSumBuilder.getCheckSum(APP_SECRET, NONCE, curTime);<br>        // 设置请求的header<br>        httpPost.addHeader(“AppKey”, APP_KEY);<br>        httpPost.addHeader(“Nonce”, NONCE);<br>        httpPost.addHeader(“CurTime”, curTime);<br>        httpPost.addHeader(“CheckSum”, checkSum);<br>        httpPost.addHeader(“Content-Type”, “application/x-www-form-urlencoded;charset=utf-8”);<br>        // 设置请求的的参数，requestBody参数<br>        List<namevaluepair> nvps = new ArrayList<namevaluepair>();<br>        // 1.如果是模板短信，请注意参数mobile是有s的，详细参数配置请参考“发送模板短信文档” 2.参数格式是jsonArray的格式，例如<br>        // “[‘13888888888’,’13666666666’]”<br>        //3.params是根据你模板里面有几个参数，那里面的参数也是jsonArray格式<br>        nvps.add(new BasicNameValuePair(“templateid”, TEMPLATEID));<br>        nvps.add(new BasicNameValuePair(“mobile”, phone));<br>        nvps.add(new BasicNameValuePair(“codeLen”, CODELEN));<br>        httpPost.setEntity(new UrlEncodedFormEntity(nvps, “utf-8”));<br>        // 执行请求<br>        HttpResponse response = httpClient.execute(httpPost);<br>         // 1.打印执行结果，打印结果一般会200、315、403、404、413、414、500<br>        // 2.具体的code有问题的可以参考官网的Code状态表<br>        String jsonCode = EntityUtils.toString(response.getEntity(), “utf-8”);<br>        //jsoncode是一个json串，例如{“code”:200,”msg”:”5”,”obj”:”251288”}<br>        //返回状态码<br>       String code= JSON.parseObject(jsonCode).getString(“code”);<br>        return code;<br>    }<br>    public static void main(String[] args) throws ClientProtocolException, IOException {<br>        String phone = “被发送信息的手机号”;<br>        String code = SendCode(phone);<br>        if (code.equals(“200”)) {<br>            System.out.println(“发送成功”);<br>        } else {<br>            System.out.println(“发送失败”);<br>        }<br>    }<br>} </namevaluepair></namevaluepair></strong></p><p><strong><font color="#FF0033">因为编辑器的缘故Java代码没有层次，所以复制到你用的IDE中,用IDE的代码规范功能规范一下</font><br>若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。 </strong></p>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> shortmessage </tag>
            
            <tag> 网易云信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>No identifier specified for entity 报错</title>
      <link href="/2018/03/23/Iderror/"/>
      <url>/2018/03/23/Iderror/</url>
      <content type="html"><![CDATA[<p><strong>最近在使用Springboot和SpringData-jpa的时候使用junit测试的时候出现了问题</strong><br><strong> <font color="#FF0033">报错为No identifier specified for entity      Error creating bean with name ‘entityManagerFactory’ defined in class path<br>                        还有Failed to load ApplicationContext</font></strong></p><p><strong>出现这种错误有可能是以下两种情况</strong></p><p><strong> <font color="#FF0033">1. @Id<br>    @GeneratedValue</font></strong></p><p><strong>这两个注解没写到实体类的主键id上面</strong></p><p><strong> <font color="#FF0033"><br>2.是@Id注解import错包。</font></strong></p><p><strong>错误：import org.springframework.data.annotation.Id;</strong></p><p><strong>正确：import javax.persistence.Id;</strong></p><p><strong>若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。</strong></p>]]></content>
      
      <categories>
          
          <category> JavaWebErrors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> No identifier specified for entity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>thymeleaf的简单用法-布局标签</title>
      <link href="/2018/03/23/thymeleaflayout/"/>
      <url>/2018/03/23/thymeleaflayout/</url>
      <content type="html"><![CDATA[<p><strong> 最近简单学习使用了thymeleaf模板引擎，现在把一些理解写出来，可能理解的很浅或者有偏差，希望读者理解，并评论对我指正，让我能够有所进步，并改正偏差。</strong></p><h3 id="一-eclipse或myeclipse-设置HTML模板"><a href="#一-eclipse或myeclipse-设置HTML模板" class="headerlink" title="一.eclipse或myeclipse 设置HTML模板"></a>一.eclipse或myeclipse 设置HTML模板</h3><p><strong> Window-&gt;Preferences-&gt;输入templates-&gt;选择HTML下的HTML Source 下的Templates-&gt;New-&gt;Name中填写thymeleaf-&gt;Context-&gt;选择New HTML-&gt;Pattern中填入</strong><br>        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> 接着-&gt;Apply-&gt;OK  一定要在HTML页面引入thymeleaf命名空间<html xmlns:th="http://www.thymeleaf.org"></html>  在html中引入此命名空间，可避免编辑器出现html验证错误。</strong></p><h3 id="二-使用自定义的HTMl模板"><a href="#二-使用自定义的HTMl模板" class="headerlink" title="二.使用自定义的HTMl模板"></a>二.使用自定义的HTMl模板</h3><p><strong> 点击文件夹-&gt;New-&gt;选择html中的（Basic Templates）-&gt;Next到选择模板页面-&gt;页面下方有蓝色的字体HTML Templates-&gt;选择自定义的HTML模板-&gt;OK就可以了</strong></p><h3 id="三-thymeleaf中布局标签的简单用法"><a href="#三-thymeleaf中布局标签的简单用法" class="headerlink" title="三.thymeleaf中布局标签的简单用法"></a>三.thymeleaf中布局标签的简单用法</h3><h4 id="1-布局标签：th-fragment-layout-fragment和th-include-th-replace-th-insert-layout-decorator"><a href="#1-布局标签：th-fragment-layout-fragment和th-include-th-replace-th-insert-layout-decorator" class="headerlink" title="1.布局标签：th:fragment,layout:fragment和th:include,th:replace,th:insert,layout:decorator"></a>1.布局标签：th:fragment,layout:fragment和th:include,th:replace,th:insert,layout:decorator</h4><h5 id="1-1-th-fragment和th-include-th-replace-th-insert的用法：定义和引用代码块"><a href="#1-1-th-fragment和th-include-th-replace-th-insert的用法：定义和引用代码块" class="headerlink" title="1.1 th:fragment和th:include,th:replace,th:insert的用法：定义和引用代码块"></a>1.1 th:fragment和th:include,th:replace,th:insert的用法：定义和引用代码块</h5><p><strong>（1）首先需要注意带有公共使用的代码块（布局标签定义的代码块）最好不要带有<html><body></body></html><br>（2）th:fragment和th:include,th:replace,th:insert的用法和后三个标签的区别<br><!-- school/common.html-->  定义代码块，公共使用</strong></p><pre><code>&lt;header th:fragment=&quot;header&quot;&gt; &lt;div&gt;this is a header&lt;/div&gt;&lt;/header&gt;&lt;div id=&quot;nofragment&quot;&gt; this i a common code&lt;/div&gt;(普通的代码块)</code></pre><p><strong> <!--school/index.html -->引用代码块 </strong></p><pre><code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;    &lt;head&gt;     &lt;title&gt;title&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;div th:insert=&quot;school/common :: header&quot;&gt; &lt;/div&gt;</code></pre><p><strong> <font color="#FF0033"> th:insert保留自己的主标签，保留th:fragment的主标签，作用插入代码块是，则对应的结果为：</font> </strong></p><pre><code>&lt;div&gt; &lt;header&gt;  &lt;div&gt;this is a header&lt;/div&gt; &lt;/header&gt;&lt;/div&gt;&lt;div th:include=&quot;school/common :: header&quot;&gt; &lt;/div&gt;</code></pre><p><strong> <font color="#FF0033"> th:include保留自己的主标签，舍弃th:fragment的主标签，作用是插入代码块，对应的结果为：</font> </strong></p><pre><code>&lt;div&gt; &lt;div&gt;this is a header&lt;/div&gt;&lt;/div&gt; &lt;div th:replace=&quot;school/common :: header&quot;&gt; &lt;/div&gt;</code></pre><p><strong> <font color="#FF0033"> th:replace舍弃自己的主标签，保留th:fragment的主标签，作用是替换代码块，对应的结果为： </font> </strong></p><pre><code>&lt;header&gt; &lt;div&gt;this is a header&lt;/div&gt;&lt;/header&gt;</code></pre><p><strong> <font color="#FF0033"> 我们也可以引用不使用定义代码块的布局标签的代码块,引用普通代码块。</font> </strong></p><pre><code>     &lt;div th:include=&quot;header:: #nofragment&quot;&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p><strong> 引入代码块的参数格式为templatename::[domselector],其中templatename是模板名（如header），domselector是可选的dom选择器(如#nofragment，是自己定义的模板中的标识)。如果只写templatename，不写domselector，则会加载整个模板。<br>如上文的加载common.html中的模板，我们指定加载header:th:include=”school/common :: header”,若是只有th:include=”school/common”，会加载common.html中所有的模板 </strong></p><p><strong> 我们可以写 </strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"header:: ($&#123;user.isManager&#125;? #&#123;header.manager&#125; : #&#123;header.noManager&#125;)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>来做选择,其中${user.isManager}是你传递的参数，header.manager和header.noManager中的后半部分是模板名字</strong></p><h4 id="1-2-layout-fragment和layout-decorator的用法"><a href="#1-2-layout-fragment和layout-decorator的用法" class="headerlink" title="1.2 layout:fragment和layout:decorator的用法"></a>1.2 layout:fragment和layout:decorator的用法</h4><p><strong> school/layout.html模板页面 </strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"school/common :: header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"school/common :: footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> school/index.html 使用模板页面</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">layout:decorator</span>=<span class="string">"school/layout"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这里使用了layout.html,所以头部和尾部使用的layout中的header和footer，中间内容可以自定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span>这里是每个页面自己定义内容的部分，个人理解相当于重写layout中content部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> 这样的话，layout.html中引入的css,js,images之类的都可以在index.html页面使用，同时index.html页面可以引入自己的css,js,images等，只不过index.html使用了layout.html的布局，而content中的内容是每个页面自定义的，不共用 </strong></p><h4 id="1-3-布局传参（模板传参）"><a href="#1-3-布局传参（模板传参）" class="headerlink" title="1.3 布局传参（模板传参）"></a>1.3 布局传参（模板传参）</h4><p><strong> 定义模板同时定义参数 school/common.html </strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"content(firstvalue,secondvalue)"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;firstvalue&#125;+'---'+$&#123;secondvalue&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> 引用模板同时传递参数 school/index.html ,参数从后台传递到前台</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:incluede</span>=<span class="string">"school/common :: content($&#123;onevalue&#125;,$&#123;twovalue&#125;)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"school/common :: content(firstvalue=$&#123;onevalue&#125;,secondvalue=$&#123;twovalue&#125;)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>定义模板的时候签名也可以不包括参数：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"content"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>我们依然可以使用</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"school/common :: content(firstvalue=$&#123;onevalue&#125;,secondvalue=$&#123;twovalue&#125;)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>还可以使用</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"school/common :: content"</span> <span class="attr">th:with</span>=<span class="string">"firstvalue=$&#123;onevalue&#125;,secondvalue=$&#123;twovalue&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>只要我们引用的模板中需要使用这些属性值，就可使用传参 </strong></p><p><strong> 我们还可以验证模板参数，用标签th:assert 断言 </strong></p><p><strong> 定义模板同时定义参数 school/common.html </strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"content(firstvalue,secondvalue)"</span> <span class="attr">th:assert</span>=<span class="string">"$&#123;!#strings.isEmpty(firstvalue,secondvalue)&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;firstvalue&#125;+'---'+$&#123;secondvalue&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> 若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。</strong></p>]]></content>
      
      <categories>
          
          <category> thymeleaf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thymeleaf </tag>
            
            <tag> 布局标签 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>thymeleaf的简单用法-常用标签</title>
      <link href="/2018/03/23/thymeleafcommon/"/>
      <url>/2018/03/23/thymeleafcommon/</url>
      <content type="html"><![CDATA[<h3 id="一-常用标签的用法"><a href="#一-常用标签的用法" class="headerlink" title="一.常用标签的用法"></a>一.常用标签的用法</h3><h4 id="1-1-th-text-用于文本的显示-并且可以进行简单的计算。"><a href="#1-1-th-text-用于文本的显示-并且可以进行简单的计算。" class="headerlink" title="1.1 th:text 用于文本的显示,并且可以进行简单的计算。"></a>1.1 th:text 用于文本的显示,并且可以进行简单的计算。</h4><pre><code>&lt;td  th:text=&quot;${username}&quot;&gt;mlm&lt;/td&gt; -&gt; &lt;td&gt;maliming&lt;/td&gt;&lt;td  th:text=&quot;9+7&quot;&gt;2018&lt;/td&gt; -&gt; &lt;td&gt;16&lt;/td&gt;</code></pre><h4 id="1-2-th-utext-用于html的文本替换-常用于富文本编辑器编辑后的内容显示到前台页面上。"><a href="#1-2-th-utext-用于html的文本替换-常用于富文本编辑器编辑后的内容显示到前台页面上。" class="headerlink" title="1.2 th:utext 用于html的文本替换,常用于富文本编辑器编辑后的内容显示到前台页面上。"></a>1.2 th:utext 用于html的文本替换,常用于富文本编辑器编辑后的内容显示到前台页面上。</h4><pre><code>&lt;p th:utext=&quot;${article.content}&quot;&gt;&lt;/p&gt; -&gt; &lt;p&gt;my name is &lt;b&gt;maliming&lt;/b&gt;&lt;/p&gt;</code></pre><h4 id="1-3-th-if-用于判断条件-还可以多条件-and-or-二元操作符-，-not非-一元操作符-。"><a href="#1-3-th-if-用于判断条件-还可以多条件-and-or-二元操作符-，-not非-一元操作符-。" class="headerlink" title="1.3 th:if 用于判断条件,还可以多条件 and,or(二元操作符)，!,not非(一元操作符)。"></a>1.3 th:if 用于判断条件,还可以多条件 and,or(二元操作符)，!,not非(一元操作符)。</h4><pre><code>&lt;div th:if=&quot;${user} != null&quot;&gt;show&lt;/div&gt;如果user对象为空则不显示，不为空则显示 -&gt; &lt;div&gt;show&lt;/div&gt;&lt;div th:if=&quot;${user} != null and ${otherUser} != null&quot;&gt;show&lt;/div&gt;</code></pre><p><strong> 运算符还可以写在${}里,如：</strong><br>        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.number &gt; 100&#125;"</span>&gt;</span>show<span class="tag">&lt;/<span class="name">div</span>&gt;</span> -&gt; <span class="tag">&lt;<span class="name">div</span>&gt;</span>show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> 运算符放在了 {} 内部, 此时整个 {} 内的表达式用 ognl/spel 引擎计算; 如果运算符放在外部, 那么 thymeleaf 引擎负责计算。</strong></p><h4 id="1-4-th-unless-用于判断条件，与th-if作用相反。"><a href="#1-4-th-unless-用于判断条件，与th-if作用相反。" class="headerlink" title="1.4 th:unless 用于判断条件，与th:if作用相反。"></a>1.4 th:unless 用于判断条件，与th:if作用相反。</h4><pre><code>&lt;div th:if=&quot;${user} != null&quot;&gt;show&lt;/div&gt;如果user对象不为空则不显示，为空则显示 -&gt; &lt;div&gt;show&lt;/div&gt;</code></pre><h4 id="1-5-th-switch-th-case-用于多个同等级相同目的判断-多选一时使用。"><a href="#1-5-th-switch-th-case-用于多个同等级相同目的判断-多选一时使用。" class="headerlink" title="1.5 th:switch th:case 用于多个同等级相同目的判断,多选一时使用。"></a>1.5 th:switch th:case 用于多个同等级相同目的判断,多选一时使用。</h4><pre><code>&lt;div th:switch=&quot;${user.name}&quot;&gt;    &lt;p th:case=&quot;maliming&quot;&gt;first&lt;/p&gt;若${user.name}中的值为maliming则显示，否则不显示    &lt;p th:case=&quot;${otherUser.name}&quot;&gt;second&lt;/p&gt;&lt;/div&gt;</code></pre><h4 id="1-6-th-action-用于定义后台控制器的路径，表单的提交地址，相当于标签的action属性。"><a href="#1-6-th-action-用于定义后台控制器的路径，表单的提交地址，相当于标签的action属性。" class="headerlink" title="1.6 th:action 用于定义后台控制器的路径，表单的提交地址，相当于标签的action属性。"></a>1.6 th:action 用于定义后台控制器的路径，表单的提交地址，相当于<form>标签的action属性。</form></h4><pre><code>&lt;form th:action=&quot;@{user/login}&quot; method=&quot;post&quot;&gt;&lt;/form&gt;</code></pre><h4 id="1-7-th-each-用于遍历集合中的对象，相当于jstl中的-lt-c-forEach-gt-标签。"><a href="#1-7-th-each-用于遍历集合中的对象，相当于jstl中的-lt-c-forEach-gt-标签。" class="headerlink" title="1.7 th:each 用于遍历集合中的对象，相当于jstl中的&lt;c:forEach&gt;标签。"></a>1.7 th:each 用于遍历集合中的对象，相当于jstl中的&lt;c:forEach&gt;标签。</h4><h5 id="1-List集合循环遍历"><a href="#1-List集合循环遍历" class="headerlink" title="(1)List集合循环遍历"></a>(1)List集合循环遍历</h5><pre><code>&lt;tr th:each=&quot;user,userStat:${messages.list}&quot;&gt;    &lt;td th:text=&quot;${user.name}&quot;&gt;&lt;/td&gt;    &lt;td th:text=&quot;userStat.index&quot;&gt;&lt;/td&gt;&lt;/tr&gt;</code></pre><p><strong> 其中的user是临时变量，相当于for(User user : users)中的user，userStat称为状态变量，属性有index:当前迭代对象的index(从0开始计算),count: 当前迭代对象的index(从1开始计算), size:被迭代对象的大小,current:当前迭代变量,even/odd:布尔值，当前循环是否是偶数/奇数(从0开始计算), first:布尔值，当前循环是否是第一个,last:布尔值，当前循环是否是最后一个。</strong></p><h5 id="2-Map集合循环遍历"><a href="#2-Map集合循环遍历" class="headerlink" title="(2)Map集合循环遍历"></a>(2)Map集合循环遍历</h5><pre><code>&lt;div th:each=&quot;map:${maps}&quot; th:text=&quot;${map}&quot;&gt;&lt;/div&gt;</code></pre><h5 id="3-数组循环遍历"><a href="#3-数组循环遍历" class="headerlink" title="(3)数组循环遍历"></a>(3)数组循环遍历</h5><pre><code>&lt;tr&gt;    &lt;td th:each=&quot;array:${arrays}&quot; th:text=&quot;${array}&quot;&gt;&lt;/td&gt;&lt;/tr&gt;</code></pre><h4 id="1-8-th-value-用于属性赋值。"><a href="#1-8-th-value-用于属性赋值。" class="headerlink" title="1.8 th:value 用于属性赋值。"></a>1.8 th:value 用于属性赋值。</h4><pre><code>&lt;option th:value=&quot;${user.name}&quot;&gt;&lt;/option&gt; -&gt; &lt;option value=&quot;maliming&quot;&gt;&lt;/option&gt;</code></pre><h4 id="1-9-th-src-用于外部资源的引入，例如图片，js文件。"><a href="#1-9-th-src-用于外部资源的引入，例如图片，js文件。" class="headerlink" title="1.9 th:src 用于外部资源的引入，例如图片，js文件。"></a>1.9 th:src 用于外部资源的引入，例如图片，js文件。</h4><pre><code>&lt;img th:src=&quot;@{../images/myself.jpg}&quot;/&gt;或&lt;script th:src=&quot;@{../static/login.js}&quot;&gt;&lt;/script&gt;</code></pre><h4 id="1-10-th-href-用于定义超链接-相当于标签的href属性。"><a href="#1-10-th-href-用于定义超链接-相当于标签的href属性。" class="headerlink" title="1.10 th:href 用于定义超链接,相当于标签的href属性。"></a>1.10 th:href 用于定义超链接,相当于<a></a>标签的href属性。</h4><pre><code>&lt;a th:href=&quot;@{/user/selectUser?(currentPage=1,reTypeid=${reTypeid},inquiry=${inquiry})}&quot;&gt;&lt;/a&gt; 传参。</code></pre><h4 id="1-11-th-remove-用于删除。可以表达式传参。"><a href="#1-11-th-remove-用于删除。可以表达式传参。" class="headerlink" title="1.11 th:remove 用于删除。可以表达式传参。"></a>1.11 th:remove 用于删除。可以表达式传参。</h4><pre><code>&lt;table border=&quot;1&quot;&gt;    &lt;thead&gt;          &lt;tr&gt;             &lt;th&gt;编号&lt;/th&gt;             &lt;th&gt;用户名&lt;/th&gt;             &lt;th&gt;姓名&lt;/th&gt;             &lt;th&gt;性别&lt;/th&gt;          &lt;/tr&gt;    &lt;/thead&gt;    &lt;tbody th:remove=&quot;all-but-first&quot; 或者表达式th:remove=&quot;${choice}? all : all-but-first&quot;&gt;          &lt;tr&gt;             &lt;td&gt;1&lt;/td&gt;             &lt;td&gt;xxxxxxxx@qq.com&lt;/td&gt;             &lt;td&gt;Tom&lt;/td&gt;             &lt;td&gt;男&lt;/td&gt;          &lt;/tr&gt;          &lt;tr&gt;             &lt;td&gt;3&lt;/td&gt;             &lt;td&gt;xxxxxxxx@qq.com&lt;/td&gt;             &lt;td&gt;Lucy13&lt;/td&gt;             &lt;td&gt;女&lt;/td&gt;           &lt;/tr&gt;     &lt;/tbody&gt;&lt;/table&gt;</code></pre><p><strong>这里的<tbody></tbody>标签中有th:remove=”all-but-first”，意思是只保留<tbody></tbody>标签中的第一个字标签，也就是name为Tom的所在<tr></tr>,其他的子标签则会删除，th:remove有五个属性值。</strong><br><strong> <font color="#FF0033">all：删除所在标签和内容及其所属的所有子标签。body：删除所在标签的内容及其所属的所有子标签。tag：删除所在标签，不删除任何所属的子标签。all-but-first：删除除第一个子标签外的其他子标签。none：不起作用，什么也不做。</font></strong></p><h4 id="1-12-th-selected-用于选择框设置选中值。通常和th-each一起使用。"><a href="#1-12-th-selected-用于选择框设置选中值。通常和th-each一起使用。" class="headerlink" title="1.12 th:selected 用于选择框设置选中值。通常和th:each一起使用。"></a>1.12 th:selected 用于选择框设置选中值。通常和th:each一起使用。</h4><pre><code>&lt;select&gt;    &lt;option th:selected=&quot;${user.name} == ${otherUser.name}&quot;&gt;&lt;/option&gt; 若相等就默认选中此&lt;option&gt;&lt;/option&gt;&lt;/select&gt;</code></pre><h4 id="1-13-th-object-用于表单数据对象绑定，后台controller中参数保持一致，和选择-星号-表达式。"><a href="#1-13-th-object-用于表单数据对象绑定，后台controller中参数保持一致，和选择-星号-表达式。" class="headerlink" title="1.13 th:object 用于表单数据对象绑定，后台controller中参数保持一致，和选择(星号)表达式。"></a>1.13 th:object 用于表单数据对象绑定，后台controller中参数保持一致，和选择(星号)表达式。</h4><pre><code>&lt;form th:object=&quot;${user}&quot;&gt;    &lt;input th:value=&quot;*{name}&quot;/&gt; *号代替了${user}&lt;/form&gt;</code></pre><p><strong> public ModelAndView addUser(@RequestParam(value = “user”) User user，ModelMap model){} </strong></p><h4 id="1-14-th-attr-用于设置任意属性"><a href="#1-14-th-attr-用于设置任意属性" class="headerlink" title="1.14 th:attr 用于设置任意属性"></a>1.14 th:attr 用于设置任意属性</h4><pre><code>&lt;input th:attr=&quot;value=${user.name}&quot;/&gt; 设置单个属性。&lt;input th:attr=&quot;value=${user.username},name=username&quot;/&gt; 设置多个属性之间用逗号隔开。</code></pre><h3 id="二-Thymeleaf中的内置对象"><a href="#二-Thymeleaf中的内置对象" class="headerlink" title="二.Thymeleaf中的内置对象"></a>二.Thymeleaf中的内置对象</h3><font color="#FF0033">#dates：日期格式化内置对象，具体方法可以参照java.util.Date；<br>                     #calendars：类似于#dates，但是是java.util.Calendar类的方法；<br>                     #numbers： 数字格式化；<br>                     #strings：字符串格式化，具体方法可以参照java.lang.String，如startsWith、contains等；<br>                     #objects：参照java.lang.Object；<br>                     #bools：判断boolean类型的工具；<br>                     #arrays：数组操作的工具；<br>                     #lists：列表操作的工具，参照java.util.List；<br>                     #sets：Set操作工具，参照java.util.Set；<br>                     #maps：Map操作工具，参照java.util.Map；<br>                     #aggregates：操作数组或集合的工具；<br>                     #messages：操作消息的工具。</font><p><strong> 若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。 </strong></p>]]></content>
      
      <categories>
          
          <category> thymeleaf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thymeleaf </tag>
            
            <tag> 常用标签 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MD5信息摘要算法的简单理解</title>
      <link href="/2018/03/23/md5/"/>
      <url>/2018/03/23/md5/</url>
      <content type="html"><![CDATA[<p><strong> 最近在做一个微项目的时候用到了MD5信息摘要算法，所以就简单的了解了一下，我把我的了解写下来，用作以后的学习。</strong></p><h3 id="一-MD5的简单理解"><a href="#一-MD5的简单理解" class="headerlink" title="一.MD5的简单理解"></a>一.MD5的简单理解</h3><p><strong> MD5的全称是Message-Digest Algorithm 5(信息摘要算法)，它面向的是32位的电脑，MD5算法会获得一个随机的长度的信息并产生一个128位的信息摘要，(也就是说可以生成一个固定长度为128bit的二进制串)。它是一个信息摘要算法，而摘要和加密是有区别的。</strong></p><h4 id="1-1-摘要"><a href="#1-1-摘要" class="headerlink" title="1.1.摘要"></a>1.1.摘要</h4><p><strong> <font color="#FF0033">摘要是哈希值，我们可以通过散列算法比如MD5算法得到哈希值。它只是用于验证数据完整性和唯一性的哈希值，<br>不管原始数据是什么样的，得到的哈希值都是固定长度并且并不是直接由原始数据加密后的密文，只是根据原始数据生成了一个验证身份的令牌。所以我们无法通过摘要解密得到原始数据。</font> </strong></p><h4 id="1-2-加密"><a href="#1-2-加密" class="headerlink" title="1.2.加密"></a>1.2.加密</h4><p><strong> <font color="#FF0033"> 加密是加密算法直接由明文加密成为密文，我们可以通过秘钥和解密算法将密文准确的还原成明文。</font></strong></p><h3 id="二-MD5算法的特点"><a href="#二-MD5算法的特点" class="headerlink" title="二.MD5算法的特点"></a>二.MD5算法的特点</h3><h4 id="2-1-压缩性"><a href="#2-1-压缩性" class="headerlink" title="2.1.压缩性"></a>2.1.压缩性</h4><p><strong> 任意长度的数据计算出的MD5值得长度都是固定的。存储和管理比较方便。 </strong></p><h4 id="2-2-易于计算"><a href="#2-2-易于计算" class="headerlink" title="2.2.易于计算"></a>2.2.易于计算</h4><p><strong> 数据计算出MD5值很容易，易于使用者的理解和使用 。 </strong></p><h4 id="2-3-细微性"><a href="#2-3-细微性" class="headerlink" title="2.3.细微性"></a>2.3.细微性</h4><p><strong> 任意大小的数据，只要经过任何的改变，哪怕只修改某个字节，所得到的MD5值都会有很大的区别，这个特点常被用于文件下载的检验。</strong></p><h4 id="2-4-不可逆性"><a href="#2-4-不可逆性" class="headerlink" title="2.4.不可逆性"></a>2.4.不可逆性</h4><p><strong> 得到一个MD5值，无法反向计算出原数据 </strong></p><h4 id="2-5-弱相同性"><a href="#2-5-弱相同性" class="headerlink" title="2.5.弱相同性"></a>2.5.弱相同性</h4><p><strong> 一个数据对应一个MD5值，一个MD5值可能对应多个原始数据。</strong></p><h3 id="三-MD5破解讲解"><a href="#三-MD5破解讲解" class="headerlink" title="三.MD5破解讲解"></a>三.MD5破解讲解</h3><p> <strong> MD5破解的方式，因为MD5算法是不可逆的，所以破解一般是”撞库破解”，也就是把大量的常用的语句经过MD5”加密”后放入数据库，再把你输入的语句经过MD5”加密”去和数据库中的MD5值对比，然后返回原语句，这样只能找出一些简单的，常用的语句 </strong></p><h3 id="四-MD5的加盐"><a href="#四-MD5的加盐" class="headerlink" title="四.MD5的加盐"></a>四.MD5的加盐</h3><p><strong> 单纯的将数据MD5”加密”后，也有被对比，暴力破解的风险，所以我们需要加盐，通俗来说就是在原数据中加入其他的数据，比如密码（password）,随机数（random number），得到password的MD5值然后加上random number然后再次MD5后，得到这个MD5值，这就是个简单的加盐过程，这样的话就算得到最后的这个MD5值得原数据，也得不到password。 </strong></p><h3 id="五-MD5值的位数"><a href="#五-MD5值的位数" class="headerlink" title="五.MD5值的位数"></a>五.MD5值的位数</h3><p><strong> 前面说了MD5后值为128bit的二进制串，但二进制都是01，会造成用户的使用，理解不便，所以将128bit的二进制串转化为16进制的串，所以就输出的MD5值为32位。16位的MD5值是从32位的MD5值抽取出来的，32位MD5值去掉前后的八位，得到的值就是16位的MD5值。 </strong></p><h3 id="六-MD5工具类（java）"><a href="#六-MD5工具类（java）" class="headerlink" title="六.MD5工具类（java）"></a>六.MD5工具类（java）</h3><p><strong> public class MD5Util {<br>    private final static char hexDigits[] = {<br>            ‘0’, ‘1’, ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’, ‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’<br>    };<br>    //MD5加密的普通方式<br>    public static String getMD5(String key){<br>        try {<br>            byte[] btInput = key.getBytes();<br>            // 获得MD5摘要算法的 MessageDigest 对象<br>            MessageDigest mdInst = MessageDigest.getInstance(“MD5”);<br>            // 使用指定的字节更新摘要<br>            mdInst.update(btInput);<br>            // 获得密文<br>            byte[] md = mdInst.digest();<br>            // 把密文转换成十六进制的字符串形式<br>            int j = md.length;<br>            char str[] = new char[j * 2];<br>            int k = 0;<br>            for (int i = 0; i &lt; j; i++) {<br>                byte byte0 = md[i];<br>                str[k++] = hexDigits[byte0 &gt;&gt;&gt; 4 &amp; 0xf];<br>                str[k++] = hexDigits[byte0 &amp; 0xf];<br>            }<br>            return new String(str);<br>        } catch (Exception e) {<br>            return null;<br>        }<br>    }<br>    //MD5加密的另一种方式<br>    public static String getOtherMD5(String key) {<br>        MessageDigest messageDigest = null;<br>        try {<br>            messageDigest = MessageDigest.getInstance(“MD5”);<br>            messageDigest.reset();<br>            messageDigest.update(key.getBytes(“UTF-8”));<br>        } catch (NoSuchAlgorithmException e) {<br>            e.printStackTrace();<br>        } catch (UnsupportedEncodingException e) {<br>        }<br>        byte[] byteArray = messageDigest.digest();<br>        StringBuffer md5StrBuff = new StringBuffer();<br>        for (int i = 0; i &lt; byteArray.length; i++) {<br>            if (Integer.toHexString(0xFF &amp; byteArray[i]).length() == 1)<br>                md5StrBuff.append(“0”).append(Integer.toHexString(0xFF &amp; byteArray[i]));<br>            else<br>                md5StrBuff.append(Integer.toHexString(0xFF &amp; byteArray[i]));<br>        }<br>        return md5StrBuff.toString();<br>    }<br>    // 加密后解密，一次是加密，两次解密<br>    public static String encrypt(String key) {<br>        char[] a = key.toCharArray();<br>        for (int i = 0; i &lt; a.length; i++) {<br>            a[i] = (char) (a[i] ^ ‘t’);<br>        }<br>        String k = new String(a);<br>        return k;<br>    }<br>} </strong></p><p><strong> 或者使用commons-codecjar包，我这里因为是maven项目，所以使用的是依赖 </strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> <font color="#FF0033">使用方式 String md5 = DigestUtils.md5Hex(“123456”);就可以了。</font><br>若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。</strong></p>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>java判断手机端和PC电脑端</title>
      <link href="/2018/03/23/phoneorcomputer/"/>
      <url>/2018/03/23/phoneorcomputer/</url>
      <content type="html"><![CDATA[<p><strong> 这几天一直在想如何用Java判断Http请求是来自手机端还是PC电脑端，想做一个网站签到功能(不允许手机端签到)<br>于是去搜索了一下，发现在请求头中有个属性叫User-Agent(用户代理)，我们可以取得User-Agent的值，然后进行筛选判断 </strong></p><h3 id="一-Java代码"><a href="#一-Java代码" class="headerlink" title="一. Java代码"></a>一. Java代码</h3><h4 id="1-1-进行对Http请求判断的工具类-mobilePhoneOrComputer-java"><a href="#1-1-进行对Http请求判断的工具类-mobilePhoneOrComputer-java" class="headerlink" title="1.1 进行对Http请求判断的工具类(mobilePhoneOrComputer.java)"></a>1.1 进行对Http请求判断的工具类(mobilePhoneOrComputer.java)</h4><p> <strong> import java.util.regex.Matcher;<br>    import java.util.regex.Pattern;<br>    public class mobilePhoneOrComputer  {<br>       // \b 是单词边界(连着的两个(字母字符 与 非字母字符) 之间的逻辑上的间隔),<br>       // 字符串在编译时会被转码一次,所以是 “\b”<br>       // \B 是单词内部逻辑间隔(连着的两个字母字符之间的逻辑上的间隔)<br>       <font color="#FF0033"> static String phoneReg = “\bNokia|SAMSUNG|MIDP-2|CLDC1.1|SymbianOS|MAUI|UNTRUSTED/1.0”<br>                                   +”|Windows CE|iPhone|iPad|Android|BlackBerry|UCWEB|ucweb|BREW|J2ME|YULONG|YuLong|COOLPAD|TIANYU|TY-“<br>                                   +”|K-Touch|Haier|DOPOD|Lenovo|LENOVO|HUAQIN|AIGO-|CTC/1.0”<br>                                   +”|CTC/2.0|CMCC|DAXIAN|MOT-|SonyEricsson|GIONEE|HTC|ZTE|HUAWEI|webOS|GoBrowser|IEMobile|WAP2.0\b”;<br>                                   static String tableReg = “\b(ipad|tablet|(Nexus 7)|up.browser”+”|[1-4][0-9]{2}x[1-4][0-9]{2})\b”;</font><br>       //移动设备正则匹配：手机端、平板<br>       static Pattern phonePat = Pattern.compile(phoneReg, Pattern.CASE_INSENSITIVE);<br>       static Pattern tablePat = Pattern.compile(tableReg, Pattern.CASE_INSENSITIVE);<br>        //检测是否是移动设备访问<br>        // userAgent 浏览器标识 ,return true:移动设备接入，false:pc端接入<br>       public static boolean check(String userAgent){<br>           if(null == userAgent){<br>               userAgent = “”;<br>           }<br>           // 匹配    移动手机端 平板<br>           Matcher matcherPhone = phonePat.matcher(userAgent);<br>           Matcher matcherTable = tablePat.matcher(userAgent);<br>           if(matcherPhone.find() || matcherTable.find()){<br>               return true;<br>           } else {<br>               return false;<br>           }<br>       }<br>    } </strong></p><h4 id="1-2-controller层方法"><a href="#1-2-controller层方法" class="headerlink" title="1.2 controller层方法"></a>1.2 controller层方法</h4><p><strong> @RequestMapping(value = “/phoneorcomputer”)<br>    public void phoneorcomputer(HttpServletRequest request) {<br>        try {<br>            String userAgent = request.getHeader(“USER-AGENT”);<br>            boolean isphone = mobilePhoneOrComputer.check(userAgent);<br>            if (isphone) {<br>                System.out.println(“我是手机”);<br>            } else {<br>                System.out.println(“我是电脑”);<br>            }<br>        } catch (Exception e) {<br>        }<br>    } </strong><br><strong> 这样我们就能判断Http请求是手机端还是PC电脑端，我们可以针对不同客户端返回相应的页面和不同的处理与功能<br> 使我们的网站适应性，包含性更强 </strong><br><strong> <font color="#FF0033">因为编辑器的缘故Java代码没有层次，所以复制到你用的IDE中,用IDE的代码规范功能规范一下</font><br>若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。 </strong></p>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>查看 IntelliJ IDEA 使用期限</title>
      <link href="/2018/03/23/IDEAdeadline/"/>
      <url>/2018/03/23/IDEAdeadline/</url>
      <content type="html"><![CDATA[<p><strong> <font color="#FF0033">首先打开IDEA，选择上面的选项help，然后help-&gt;Register…或者help-&gt;About<br>看图，有图有真相</font> </strong><br><img src="/img/page/help.png" alt="Alt text">            <img src="/img/page/register.png" alt="Alt text"><br><img src="/img/page/about.png" alt="Alt text"></p>]]></content>
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>wangEditor2上传图片</title>
      <link href="/2018/03/22/wangEditor2/"/>
      <url>/2018/03/22/wangEditor2/</url>
      <content type="html"><![CDATA[<p><strong> 我用的是myeclipse 2017,spring boot+thymeleaf项目,wangEditor2与wangeditor3的配置方式不同，切记看文档，最下方是官方文档。这是我早期写的博客：ssh使用wangEditor2：<a href="https://blog.csdn.net/malimingwq/article/details/76214865" title="wangEditor2" target="_blank" rel="noopener">wangEditor2</a> </strong></p><h3 id="一-下载，创建编辑器以及配置"><a href="#一-下载，创建编辑器以及配置" class="headerlink" title="一.下载，创建编辑器以及配置"></a>一.下载，创建编辑器以及配置</h3><h4 id="1-1-下载wangEditor2的GitHub网址："><a href="#1-1-下载wangEditor2的GitHub网址：" class="headerlink" title="1.1 下载wangEditor2的GitHub网址："></a>1.1 下载wangEditor2的GitHub网址：</h4><p><a href="https://github.com/wangfupeng1988/wangEditor/releases" target="_blank" rel="noopener">https://github.com/wangfupeng1988/wangEditor/releases</a><br><strong>选取版本2的下载。</strong></p><h4 id="1-2-选取下载的文件夹中的dist，导入项目中。"><a href="#1-2-选取下载的文件夹中的dist，导入项目中。" class="headerlink" title="1.2 选取下载的文件夹中的dist，导入项目中。"></a>1.2 选取下载的文件夹中的dist，导入项目中。</h4><h4 id="1-3-创建编辑器："><a href="#1-3-创建编辑器：" class="headerlink" title="1.3 创建编辑器："></a>1.3 创建编辑器：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/dist/css/wangEditor.min.css&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 编辑器编辑，提交时执行js，获得编辑器的内容，赋值给textarea，用于向后台提交存入数据库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">   function modifyContent() &#123;</span></span><br><span class="line"><span class="undefined">   var content = document.getElementById("content");</span></span><br><span class="line"><span class="undefined">    content.value = editor.$txt.html();</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"@&#123;/admin/addUser&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">onsubmit</span>=<span class="string">"modifyContent()"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 设置全屏功能的两个js文件，必须先引入jquery-1.10.2.min.js(1.7版本以上)，在引入wangEditor.min.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/dist/js/lib/jquery-1.10.2.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/dist/js/wangEditor.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- wangEditor2自带了全屏功能，但是自定义大小需要用父容器来控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:500px;height:400px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"100"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editor"</span> <span class="attr">style</span>=<span class="string">"width:100%;height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">                        var E = window.wangEditor</span></span><br><span class="line"><span class="undefined">                        var editor = new E('editor')</span></span><br><span class="line"><span class="undefined">                        /* 这里是controller中上传图片方法的路径 */</span></span><br><span class="line"><span class="undefined">                     editor.config.uploadImgUrl = '/admin/uploadImage'</span></span><br><span class="line"><span class="undefined">                     /* 上传图片的默认名字 */</span></span><br><span class="line"><span class="undefined">                     editor.config.uploadImgFileName = 'myFileName'</span></span><br><span class="line"><span class="undefined">                        editor.create()</span></span><br><span class="line"><span class="undefined">             </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-5-如果你用的thymeleaf，则执行修改功能时，可使用th-utext给创建富文本编辑器的div直接赋值-你添加到数据库中的编辑器内容"><a href="#1-5-如果你用的thymeleaf，则执行修改功能时，可使用th-utext给创建富文本编辑器的div直接赋值-你添加到数据库中的编辑器内容" class="headerlink" title="1.5 如果你用的thymeleaf，则执行修改功能时，可使用th:utext给创建富文本编辑器的div直接赋值(你添加到数据库中的编辑器内容)"></a>1.5 如果你用的thymeleaf，则执行修改功能时，可使用th:utext给创建富文本编辑器的div直接赋值(你添加到数据库中的编辑器内容)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editor"</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;users.content&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong> 若是使用的其他，如jsp，则可以使用编辑器的设置内容功能：editor.$txt.html(‘${users.content}’) </strong></p><h3 id="二-Java-上传图片并回显"><a href="#二-Java-上传图片并回显" class="headerlink" title="二.Java 上传图片并回显"></a>二.Java 上传图片并回显</h3><h4 id="2-1-返回结果的数据格式-上传图片的url地址，这和wangEditor3要求的json格式不同。"><a href="#2-1-返回结果的数据格式-上传图片的url地址，这和wangEditor3要求的json格式不同。" class="headerlink" title="2.1 返回结果的数据格式:上传图片的url地址，这和wangEditor3要求的json格式不同。"></a>2.1 返回结果的数据格式:上传图片的url地址，这和wangEditor3要求的json格式不同。</h4><h4 id="2-2-根据返回结果写Java上传类，返回图片的url"><a href="#2-2-根据返回结果写Java上传类，返回图片的url" class="headerlink" title="2.2 根据返回结果写Java上传类，返回图片的url"></a>2.2 根据返回结果写Java上传类，返回图片的url</h4><p><strong> WangEditorController.java (为了方便，省去了service层，serviceImpl层，dao层) </strong></p><p><strong>import java.io.File;<br>import java.io.IOException;<br>import java.util.UUID;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import javax.servlet.http.HttpSession;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RestController;<br>import org.springframework.web.multipart.MultipartFile;<br>import org.springframework.web.servlet.ModelAndView; </strong></p><p><strong> @RequestMapping(“admin”)<br>@RestController<br>public class WangEditorController {<br>    //转到wangEditor2的界面<br>    @RequestMapping(value = “/wangEditor2”)<br>    public ModelAndView wangEditor2() {<br>        return new ModelAndView(“login”);//login.html<br>    }<br>    //上传图片并返回图片url，接收的图片名和wangEditor定义的图片名保持一致<br>    @RequestMapping(“uploadImage”)<br>    public void uploadImage(MultipartFile myFileName, HttpSession session, HttpServletRequest request,<br>            HttpServletResponse response) throws IOException {<br>        String realName = “”;<br>        if (myFileName != null) {<br>            String fileName = myFileName.getOriginalFilename();<br>            String fileNameExtension = fileName.substring(fileName.indexOf(“.”), fileName.length() - 1);<br>            // 生成实际存储的真实文件名<br>            realName = UUID.randomUUID().toString() + fileNameExtension;<br>            String realPath = session.getServletContext().getRealPath(“/upload/“);<br>            File uploadFile = new File(realPath, realName);<br>            myFileName.transferTo(uploadFile);<br>        }//upload是你保存上传图片的文件夹<br>        response.getWriter().write(request.getContextPath() + “/upload/“ + realName);<br>    }<br>} </strong><br><strong> 2.3 wangEditor2官方文档网址：<a href="https://www.kancloud.cn/wangfupeng/wangeditor2" target="_blank" rel="noopener">https://www.kancloud.cn/wangfupeng/wangeditor2</a><br>2.4 wangEditor的demo例子：<a href="http://www.wangeditor.com/" title="wangeditor3" target="_blank" rel="noopener">wangeditor3</a> </strong></p><p><strong><font color="#FF0033">因为编辑器的缘故Java代码没有层次，所以复制到你用的IDE中,用IDE的代码规范功能规范一下</font><br>若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。 </strong></p>]]></content>
      
      <categories>
          
          <category> wangEditor </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>wangEditor3上传图片</title>
      <link href="/2018/03/21/wangEditor3/"/>
      <url>/2018/03/21/wangEditor3/</url>
      <content type="html"><![CDATA[<p><strong> 我用的是myeclipse 2017,spring boot+thymeleaf项目,wangEditor3与wangeditor2的配置方式不同，切记看文档，最下方是官方文档。 </strong></p><h3 id="一-下载，创建编辑器以及配置"><a href="#一-下载，创建编辑器以及配置" class="headerlink" title="一.下载，创建编辑器以及配置"></a>一.下载，创建编辑器以及配置</h3><h4 id="1-1-下载wangEditor3的GitHub网址："><a href="#1-1-下载wangEditor3的GitHub网址：" class="headerlink" title="1.1 下载wangEditor3的GitHub网址："></a>1.1 下载wangEditor3的GitHub网址：</h4><p><a href="https://github.com/wangfupeng1988/wangEditor/releases" target="_blank" rel="noopener">https://github.com/wangfupeng1988/wangEditor/releases</a></p><h4 id="1-2-选取下载的文件夹中release，导入项目中。"><a href="#1-2-选取下载的文件夹中release，导入项目中。" class="headerlink" title="1.2 选取下载的文件夹中release，导入项目中。"></a>1.2 选取下载的文件夹中release，导入项目中。</h4><h4 id="1-3-让编辑器支持全屏功能的准备：下载全屏插件的GitHub网址："><a href="#1-3-让编辑器支持全屏功能的准备：下载全屏插件的GitHub网址：" class="headerlink" title="1.3 让编辑器支持全屏功能的准备：下载全屏插件的GitHub网址："></a>1.3 让编辑器支持全屏功能的准备：下载全屏插件的GitHub网址：</h4><p><a href="https://github.com/chris-peng/wangEditor-fullscreen-plugin" target="_blank" rel="noopener">https://github.com/chris-peng/wangEditor-fullscreen-plugin</a><br><strong> 把wangEditor-fullscreen-plugin.css和wangEditor-fullscreen-plugin.js两个文件下载下来，再下载jquery-3.2.1.min.js，都放入release文件夹（想放哪里放哪里，引入时路径保证正确就可以）。 </strong></p><h4 id="1-4-创建编辑器："><a href="#1-4-创建编辑器：" class="headerlink" title="1.4 创建编辑器："></a>1.4 创建编辑器：</h4><p><strong> 进入release文件夹下找到wangEditor.js或者wangEditor.min.js，引入任意一个。例子： </strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置全屏功能的css文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/release/wangEditor-fullscreen-plugin.css&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 编辑器编辑后，提交时执行js，获得编辑器的内容，赋值给textarea，用于向后台提交存入数据库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">function modifyContent() &#123;</span></span><br><span class="line"><span class="undefined">var introduce = document.getElementById("introduce");</span></span><br><span class="line"><span class="undefined">introduce.value = editor.txt.html();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/admin/addUser&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">onsubmit</span>=<span class="string">"modifyContent()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编辑器编辑，提交时执行js，获得编辑器的内容，赋值给textarea，用于向后台提交存入数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"35"</span> <span class="attr">name</span>=<span class="string">"usIntroduce"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">id</span>=<span class="string">"introduce"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎使用 <span class="tag">&lt;<span class="name">b</span>&gt;</span>wangEditor<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 富文本编辑器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意， 只需要引用 JS，无需引用任何 CSS ！！！--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/release/wangEditor.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置全屏功能的两个js文件，先引入jquery-3.2.1.min.js，在引入wangEditor-fullscreen-plugin.js --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/release/jquery-3.2.1.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/release/wangEditor-fullscreen-plugin.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            var E = window.wangEditor</span></span><br><span class="line"><span class="undefined">            var editor = new E('#editor')</span></span><br><span class="line"><span class="undefined">            /* 处理上传图片的controller路径 */</span></span><br><span class="line"><span class="undefined">             editor.customConfig.uploadImgServer = '/admin/uploadImg'</span></span><br><span class="line"><span class="undefined">             /* 定义上传图片的默认名字 */</span></span><br><span class="line"><span class="undefined">             editor.customConfig.uploadFileName = 'myFileName'</span></span><br><span class="line"><span class="undefined">            // 或者 var editor = new E( document.getElementById('editor') )</span></span><br><span class="line"><span class="undefined">            editor.create()</span></span><br><span class="line"><span class="undefined">            //初始化全屏插件</span></span><br><span class="line"><span class="undefined">            E.fullscreen.init('#editor');</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="1-5-如果你用的thymeleaf，则执行修改功能时，可使用th-utext给富文本编辑器赋值-你添加到数据库中的编辑器内容"><a href="#1-5-如果你用的thymeleaf，则执行修改功能时，可使用th-utext给富文本编辑器赋值-你添加到数据库中的编辑器内容" class="headerlink" title="1.5 如果你用的thymeleaf，则执行修改功能时，可使用th:utext给富文本编辑器赋值(你添加到数据库中的编辑器内容)"></a>1.5 如果你用的thymeleaf，则执行修改功能时，可使用th:utext给富文本编辑器赋值(你添加到数据库中的编辑器内容)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editor"</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;users.usIntroduce&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong> 若是使用的其他，如jsp，则可以使用编辑器的设置内容功能：editor.txt.html(‘${users.usIntroduce}’) </strong></p><h3 id="二-Java-上传图片并回显"><a href="#二-Java-上传图片并回显" class="headerlink" title="二.Java 上传图片并回显"></a>二.Java 上传图片并回显</h3><h4 id="2-1-返回结果的数据格式"><a href="#2-1-返回结果的数据格式" class="headerlink" title="2.1 返回结果的数据格式"></a>2.1 返回结果的数据格式</h4><p><strong> 这是官方文档给我们的数据格式，是json格式，实际使用忽略注释(//以及//后的内容) </strong></p><p><strong> <font color="#FF0033">{<br>    // errno 即错误代码，0 表示没有错误。<br>    //       如果有错误，errno != 0，可通过下文中的监听函数 fail 拿到该错误码进行自定义处理<br>    “errno”: 0,<br>    // data 是一个数组，返回若干图片的线上地址<br>    “data”: [<br>        “图片1地址”,<br>        “图片2地址”,<br>        “……”<br>    ]<br>}</font> </strong></p><h4 id="2-2-根据返回结果制定返回数据类-Result-java-省略无参和有参构造方法以及getter-setter方法"><a href="#2-2-根据返回结果制定返回数据类-Result-java-省略无参和有参构造方法以及getter-setter方法" class="headerlink" title="2.2 根据返回结果制定返回数据类 Result.java(省略无参和有参构造方法以及getter,setter方法)"></a>2.2 根据返回结果制定返回数据类 Result.java(省略无参和有参构造方法以及getter,setter方法)</h4><p><strong> import java.io.Serializable;<br>public class Result<t> implements Serializable {<br>    /<em> 错误码. </em>/<br>    private Integer errno;<br>    /<em> 具体的内容. </em>/<br>    private String [] data;<br>} </t></strong></p><h4 id="2-3-处理返回结果类-ResultUtil-java-只有成功获得数据的处理方法，如需要其他方法自行添加"><a href="#2-3-处理返回结果类-ResultUtil-java-只有成功获得数据的处理方法，如需要其他方法自行添加" class="headerlink" title="2.3 处理返回结果类 ResultUtil.java(只有成功获得数据的处理方法，如需要其他方法自行添加)"></a>2.3 处理返回结果类 ResultUtil.java(只有成功获得数据的处理方法，如需要其他方法自行添加)</h4><p><strong> import java.util.List;<br>public class ResultUtil {<br>    public static Result success(String []object) {<br>        Result result = new Result();<br>        result.setErrno(0);<br>        result.setData(object);<br>        return result;<br>    }<br>    public static Result success() {<br>        return success(null);<br>    }<br>} </strong></p><h4 id="2-4-WangEditorController-java-为了方便，省去了service层，serviceImpl层，dao层"><a href="#2-4-WangEditorController-java-为了方便，省去了service层，serviceImpl层，dao层" class="headerlink" title="2.4 WangEditorController.java (为了方便，省去了service层，serviceImpl层，dao层)"></a>2.4 WangEditorController.java (为了方便，省去了service层，serviceImpl层，dao层)</h4><p><strong> import java.io.File;<br>import java.io.IOException;<br>import java.util.UUID;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpSession;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RestController;<br>import org.springframework.web.multipart.MultipartFile;<br>import org.springframework.web.servlet.ModelAndView; </strong></p><p><strong> @RequestMapping(“admin”)<br>@RestController<br>public class WangEditorController {<br>    //转到wangEditor3的界面<br>    @RequestMapping(value = “/wangEditor3”)<br>    public ModelAndView wangEditor(){<br>        return new ModelAndView(“index”);//index.html<br>    }<br>    //上传图片并返回图片路径(json格式)，接收的图片名和wangEditor定义的图片名保持一致<br>    @RequestMapping(“uploadImg”)<br>    public Result uploadImg(MultipartFile myFileName,HttpSession session,HttpServletRequest request) throws IllegalStateException, IOException{<br>        String realName = “”;<br>        if (myFileName != null) {<br>            String fileName = myFileName.getOriginalFilename();<br>            String fileNameExtension = fileName.substring(fileName.indexOf(“.”), fileName.length() - 1);<br>            // 生成实际存储的真实文件名<br>            realName = UUID.randomUUID().toString() + fileNameExtension;<br>// “/upload”是你自己定义的上传目录<br>String realPath = session.getServletContext().getRealPath(“/upload”);<br>    File uploadFile = new File(realPath, realName);<br>    myFileName.transferTo(uploadFile);<br>    }<br>    String [] str = {request.getContextPath() + “/upload/“ + realName};<br>        return ResultUtil.success(str);<br>        }<br>} </strong></p><h4 id="2-5-Java对象转json串"><a href="#2-5-Java对象转json串" class="headerlink" title="2.5 Java对象转json串"></a>2.5 Java对象转json串</h4><p><strong> 我的项目是spring boot项目，由@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用，@ResponseBody将Java对象转为json串，但是有些初学者用的还是普通Java项目等没有这些自动转换的功能，所以这里是解决方法<br>(1)maven项目在pom.xml中添加 </strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong> (2)普通Java项目自行下载 json-lib-2.4.jar 导入项目并Build Path </strong></p><p><strong> (3)使用方法，如上文<br>Result result = ResultUtil.success(str);<br>JSONObject object =JSONObject.fromObject(result );<br>response.getWriter().write(object.toString());需要用到HttpServletResponse response </strong></p><h4 id="2-6-wangEditor3官方文档网址：https-www-kancloud-cn-wangfupeng-wangeditor3"><a href="#2-6-wangEditor3官方文档网址：https-www-kancloud-cn-wangfupeng-wangeditor3" class="headerlink" title="2.6 wangEditor3官方文档网址：https://www.kancloud.cn/wangfupeng/wangeditor3"></a>2.6 wangEditor3官方文档网址：<a href="https://www.kancloud.cn/wangfupeng/wangeditor3" target="_blank" rel="noopener">https://www.kancloud.cn/wangfupeng/wangeditor3</a></h4><h4 id="2-7-wangEditor的demo例子：wangeditor3"><a href="#2-7-wangEditor的demo例子：wangeditor3" class="headerlink" title="2.7 wangEditor的demo例子：wangeditor3"></a>2.7 wangEditor的demo例子：<a href="http://www.wangeditor.com/" title="wangeditor3" target="_blank" rel="noopener">wangeditor3</a></h4><p><strong><font color="#FF0033">因为编辑器的缘故Java代码没有层次，所以复制到你用的IDE中,用IDE的代码规范功能规范一下</font><br>若是哪里有理解错误的或写错的地方，望各位读者评论或者私信指正，不胜感激。 </strong></p>]]></content>
      
      <categories>
          
          <category> wangEditor </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/21/hello-world/"/>
      <url>/2018/03/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>about me</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="about-me"><a href="#about-me" class="headerlink" title="about me"></a>about me</h2><p><strong>my name is maliming,English is called Jack<br>我比较喜欢宅在一个自己感到温暖的地方,喜欢面食,辣椒<br>喜欢看小说(名著,网文都可以),喜欢听音乐,最喜欢音乐是——Break Me Up: <a href="http://music.163.com/#/song?id=30590268" title="Break Me Up" target="_blank" rel="noopener">Break Me Up</a>。<br>喜欢轻松,自在的感觉,也喜欢跑步,喜欢动漫-龙珠,梦想就是能在夜晚下雨中的小湖上画船听雨眠٩(๑❛ᴗ❛๑)۶</strong></p><h2 id="contact-me-联系我"><a href="#contact-me-联系我" class="headerlink" title="contact me(联系我)"></a>contact me(联系我)</h2><p><strong>email：<a href="mailto:wqmlm1365413148@outlook.com" title="email" target="_blank" rel="noopener">邮箱</a></strong><br><strong>GitHub： <a href="https://github.com/malimingwq/" title="GitHub" target="_blank" rel="noopener">GitHub</a></strong><br><strong>网易云：<a href="http://music.163.com/#/user/home?id=384456184" title="music" target="_blank" rel="noopener">网易云</a></strong><br><strong>QQ：1365413148</strong></p>]]></content>
    </entry>
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
